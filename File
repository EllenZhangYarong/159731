
if(s1 < s2 ){
cout<<"s1<s2 || s1 = "<<s1<<" ||s2 = "<<s2<<endl;
for(auto vecS2: setsOfBlob.at(s2)){
setsOfBlob.at(s1).back();
setsOfBlob.at(s1).push_back(vecS2);

this->imgMask.at<int>(vecS2.x, vecS2.y) = s1;

}


setsOfBlob.at(s2).clear();
setsOfBlob.at(s2).shrink_to_fit();

}else{
cout<<"ever enter here ? "<<endl;

for(auto vecS1: setsOfBlob.at(s1)){

setsOfBlob.at(s2).push_back(vecS1);

this->imgMask.at<int>(vecS1.x, vecS1.y) = s2;

}

setsOfBlob.at(s1).clear();
setsOfBlob.at(s1).shrink_to_fit();

}


Mat ColorBlobs::frameBlobs(Mat image){

Mat canny_output;
vector<vector<Point> > contours;
vector<Vec4i> hierarchy;

Canny( image, canny_output, thresh, thresh*2, 3 );
findContours(image, contours, hierarchy, RETR_LIST, CHAIN_APPROX_NONE, Point(0, 0));

//    for(auto x : contours){
//        for(auto y : x)
//            cout<< y <<"  ";
//        cout <<  endl;
//    }

cout<<"contours size : "<<contours.size()<<endl;

Mat drawing = Mat::zeros( canny_output.size(), CV_8UC3 );

for( int i = 0; i< contours.size(); i++ )
{
Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
drawContours( drawing, contours, i, color, 2, 8 , hierarchy, 1, Point());
}
return drawing;
};

